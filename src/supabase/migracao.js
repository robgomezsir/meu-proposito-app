import { supabase } from './config'
import { migrarDadosFirebase } from './services'

// Fun√ß√£o para exportar dados do Firebase (localStorage como fallback)
export const exportarDadosFirebase = () => {
  try {
    // Tentar obter dados do localStorage (backup)
    const dadosLocal = localStorage.getItem('usuarios')
    if (dadosLocal) {
      const usuarios = JSON.parse(dadosLocal)
      console.log(`üìä Dados encontrados no localStorage: ${usuarios.length} usu√°rios`)
      return usuarios
    }
    
    console.log('‚ö†Ô∏è Nenhum dado encontrado no localStorage')
    return []
  } catch (error) {
    console.error('‚ùå Erro ao exportar dados do localStorage:', error)
    return []
  }
}

// Fun√ß√£o para limpar dados do Supabase (apenas para testes)
export const limparDadosSupabase = async () => {
  try {
    console.log('üßπ Limpando dados do Supabase...')
    
    const { error } = await supabase
      .from('usuarios')
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000')
    
    if (error) {
      console.error('‚ùå Erro ao limpar dados do Supabase:', error)
      return { sucesso: false, erro: error.message }
    }
    
    console.log('‚úÖ Dados do Supabase limpos com sucesso!')
    return { sucesso: true }
  } catch (error) {
    console.error('‚ùå Erro ao limpar dados:', error)
    return { sucesso: false, erro: error.message }
  }
}

// Fun√ß√£o principal de migra√ß√£o
export const executarMigracao = async () => {
  try {
    console.log('üöÄ INICIANDO PROCESSO DE MIGRA√á√ÉO FIREBASE ‚Üí SUPABASE')
    console.log('=' .repeat(60))
    
    // 1. Exportar dados do Firebase
    console.log('üì§ Passo 1: Exportando dados do Firebase...')
    const dadosFirebase = exportarDadosFirebase()
    
    if (dadosFirebase.length === 0) {
      console.log('‚ö†Ô∏è Nenhum dado para migrar. Migra√ß√£o cancelada.')
      return {
        sucesso: false,
        mensagem: 'Nenhum dado encontrado para migra√ß√£o'
      }
    }
    
    console.log(`‚úÖ ${dadosFirebase.length} usu√°rios encontrados para migra√ß√£o`)
    
    // 2. Executar migra√ß√£o
    console.log('üîÑ Passo 2: Executando migra√ß√£o...')
    const resultado = await migrarDadosFirebase(dadosFirebase)
    
    if (resultado.sucesso) {
      console.log('üéâ MIGRA√á√ÉO CONCLU√çDA COM SUCESSO!')
      console.log(`üìä Total migrado: ${resultado.total}`)
      console.log(`‚úÖ Sucessos: ${resultado.sucessos}`)
      console.log(`‚ùå Erros: ${resultado.erros}`)
      
      // 3. Limpar dados antigos (opcional)
      if (resultado.sucessos > 0) {
        console.log('üßπ Passo 3: Limpando dados antigos do localStorage...')
        localStorage.removeItem('usuarios')
        console.log('‚úÖ Dados antigos removidos com sucesso!')
      }
      
      return {
        sucesso: true,
        total: resultado.total,
        sucessos: resultado.sucessos,
        erros: resultado.erros,
        mensagem: 'Migra√ß√£o conclu√≠da com sucesso!'
      }
    } else {
      console.error('‚ùå MIGRA√á√ÉO FALHOU!')
      return {
        sucesso: false,
        erro: resultado.erro,
        mensagem: 'Erro durante a migra√ß√£o'
      }
    }
  } catch (error) {
    console.error('‚ùå ERRO CR√çTICO DURANTE MIGRA√á√ÉO:', error)
    return {
      sucesso: false,
      erro: error.message,
      mensagem: 'Erro cr√≠tico durante migra√ß√£o'
    }
  }
}

// Fun√ß√£o para verificar status da migra√ß√£o
export const verificarStatusMigracao = async () => {
  try {
    console.log('üîç Verificando status da migra√ß√£o...')
    
    // Verificar dados no Supabase
    const { data: usuariosSupabase, error: errorSupabase } = await supabase
      .from('usuarios')
      .select('count')
      .limit(1)
    
    if (errorSupabase) {
      console.error('‚ùå Erro ao verificar Supabase:', errorSupabase)
      return {
        sucesso: false,
        erro: errorSupabase.message
      }
    }
    
    // Verificar dados no localStorage
    const dadosLocal = localStorage.getItem('usuarios')
    const usuariosLocal = dadosLocal ? JSON.parse(dadosLocal) : []
    
    console.log('üìä Status da migra√ß√£o:')
    console.log(`   ‚Ä¢ Supabase: ${usuariosSupabase?.length || 0} usu√°rios`)
    console.log(`   ‚Ä¢ LocalStorage: ${usuariosLocal.length} usu√°rios`)
    
    return {
      sucesso: true,
      supabase: usuariosSupabase?.length || 0,
      localStorage: usuariosLocal.length,
      migracaoCompleta: usuariosSupabase?.length > 0 && usuariosLocal.length === 0
    }
  } catch (error) {
    console.error('‚ùå Erro ao verificar status:', error)
    return {
      sucesso: false,
      erro: error.message
    }
  }
}

// Fun√ß√£o para reverter migra√ß√£o (restaurar dados do localStorage)
export const reverterMigracao = async () => {
  try {
    console.log('üîÑ Revertendo migra√ß√£o...')
    
    // Verificar se h√° backup no localStorage
    const dadosLocal = localStorage.getItem('usuarios')
    if (!dadosLocal) {
      console.log('‚ö†Ô∏è Nenhum backup encontrado para reverter')
      return {
        sucesso: false,
        mensagem: 'Nenhum backup encontrado'
      }
    }
    
    // Limpar dados do Supabase
    const resultadoLimpeza = await limparDadosSupabase()
    if (!resultadoLimpeza.sucesso) {
      return resultadoLimpeza
    }
    
    console.log('‚úÖ Migra√ß√£o revertida com sucesso!')
    return {
      sucesso: true,
      mensagem: 'Migra√ß√£o revertida com sucesso'
    }
  } catch (error) {
    console.error('‚ùå Erro ao reverter migra√ß√£o:', error)
    return {
      sucesso: false,
      erro: error.message
    }
  }
}
